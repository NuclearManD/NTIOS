ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ;  Origionally from some old OS design I made.
                              2 ; Then became MinOS
                              3 ; Kernel reused in NTIOS 0.1
                              4 ; Kernel moved to C port of OS to speed up OS functions using assembly
                              5 ; Copyright Dylan Brophy 2017
                              6 
                              7 .module BOOT
                              8 .globl	_osstart
                              9 .globl	gsinit
                             10 .area	HOME
   0000                      11 _main::
   0000                      12 vectors::
   0000 C3 00 00      [10]   13 	jp os_start ; 0000 (reboot)
   0003 C3 8A 00      [10]   14 	jp ostream  ; 0003
   0006 C3 00 00      [10]   15 	jp 0        ; 0006
   0009 C3 00 00      [10]   16 	jp 0        ; 0009
   000C C3 00 00      [10]   17 	jp 0;delete   000C
   000F C3 2A 00      [10]   18 	jp strcomp  ; 000F
   0012 C3 00 00      [10]   19 	jp 0        ; 0012
   0015 C3 00 00      [10]   20 	jp 0000     ; 0015
   0018 C3 00 00      [10]   21 	jp 0000;endpgm   ; 0018
                             22 	
   001B C3 00 00      [10]   23 	jp 0000     ; 001B
   001E C3 00 00      [10]   24 	jp 0000     ; 001E
   0021 C3 00 00      [10]   25 	jp 0000     ; 0021
   0024 C3 00 00      [10]   26 	jp 0000     ; 0024
   0027 00            [ 4]   27 	nop
   0028 C3 00 00      [10]   28 	jp 0000     ; 0028
   002B C3 00 00      [10]   29 	jp 0000     ; 002B
   002E C3 00 00      [10]   30 	jp 0000     ; 002E
   0031 C3 00 00      [10]   31 	jp 0000     ; 0031
   0034 C3 00 00      [10]   32 	jp 0000     ; 0034
   0037 00            [ 4]   33 nop             ; 0037
   0038                      34 int38::         ; 0038, Z80 interrupt mode 1 vector
   0038 E5            [11]   35 	push hl
   0039 F5            [11]   36 	push af
   003A D5            [11]   37 	push de
   003B C5            [11]   38 	push bc
   003C DD E5         [15]   39 	push ix
   003E FD E5         [15]   40 	push iy
   0040 C3 37 00      [10]   41 	jp 55 ; lol
   0043 FD E1         [14]   42 	pop iy
   0045 DD E1         [14]   43 	pop ix
   0047 C1            [10]   44 	pop bc
   0048 D1            [10]   45 	pop de
   0049 F1            [10]   46 	pop af
   004A E1            [10]   47 	pop hl
   004B ED 4D         [14]   48 	reti
                             49 .area _CODE
   0000                      50 os_start::
   0000 F3            [ 4]   51 	di
   0001 31 FF FF      [10]   52 	ld sp, #0xFFFF
   0004 21 00 00      [10]   53 	ld hl, #0
                             54 	; Hardware (UART) setup if using 18.43MHz clock
   0007 3E 80         [ 7]   55 	ld a, #0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



   0009 D3 03         [11]   56 	out (3), a			; SET DLAB
   000B 3E 0A         [ 7]   57 	ld a, #10			; 115200 baud
   000D D3 00         [11]   58 	out (0), a
   000F 3E 00         [ 7]   59 	ld a, #0
   0011 D3 01         [11]   60 	out (1), a        
   0013 3E 03         [ 7]   61 	ld a, #3
   0015 D3 03         [11]   62 	out (3), a          ; 8-bit serial, RESET DLAB
   0017 3E 01         [ 7]   63 	ld a, #1
   0019 D3 02         [11]   64 	out (2), a          ; enable FIFOs
                             65 	
   001B 3E 00         [ 7]   66 	ld a, #0
   001D CD 7F 00      [17]   67 	call uart_send
                             68 	
   0020 CD 00 00      [17]   69 	call gsinit ; start cstdlib
   0023 CD 00 00      [17]   70 	call _osstart
   0026                      71 .hlt:
   0026 76            [ 4]   72 	halt
   0027 C3 26 00      [10]   73 	jp .hlt ; main shouldn't return, but if it does, then halt the CPU.
                             74 
   002A                      75 strcomp::
   002A D5            [11]   76 	push de
   002B E5            [11]   77 	push hl
   002C                      78 .strcomp_l: 
   002C 1A            [ 7]   79     ld a,(de) 
   002D BE            [ 7]   80     cp (hl) 
   002E C2 37 00      [10]   81     jp nz, .strcret    ;nz means they are not equal 
   0031 23            [ 6]   82     inc hl 
   0032 13            [ 6]   83     inc de 
   0033 B7            [ 4]   84     or a       ;set the z flag if they're equal
   0034 C2 2C 00      [10]   85     jp nz, .strcomp_l
   0037                      86 .strcret:
   0037 E1            [10]   87 	pop hl
   0038 D1            [10]   88 	pop de
   0039 28 04         [12]   89 	jr z, .equal
   003B 3E 01         [ 7]   90 	ld a, #1
   003D B7            [ 4]   91 	or a 
   003E C9            [10]   92 	ret
   003F                      93 .equal:
   003F AF            [ 4]   94 	xor a
   0040 C9            [10]   95 	ret
                             96 	
                             97 ; int_to_hex - convert HL into hex string in de (allocate your own RAM)
   0041                      98 int_to_hex::
   0041 D5            [11]   99 	push de
   0042 EB            [ 4]  100 	ex de, hl
   0043 E5            [11]  101 	push hl
   0044 7A            [ 4]  102 	ld a, d
   0045 CD 61 00      [17]  103 	call .c1
   0048 77            [ 7]  104 	ld (hl), a
   0049 23            [ 6]  105 	inc hl
   004A 7A            [ 4]  106 	ld a, d
   004B CD 65 00      [17]  107 	call .c2
   004E 77            [ 7]  108 	ld (hl), a
   004F 23            [ 6]  109 	inc hl
   0050 7B            [ 4]  110 	ld a, e
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



   0051 CD 61 00      [17]  111 	call .c1
   0054 77            [ 7]  112 	ld (hl), a
   0055 23            [ 6]  113 	inc hl
   0056 7B            [ 4]  114 	ld a, e
   0057 CD 65 00      [17]  115 	call .c2
   005A 77            [ 7]  116 	ld (hl), a
   005B 23            [ 6]  117 	inc hl
   005C AF            [ 4]  118 	xor a
   005D 77            [ 7]  119 	ld (hl), a
   005E E1            [10]  120 	pop hl
   005F D1            [10]  121 	pop de
   0060 C9            [10]  122 	ret
   0061                     123 .c1:
   0061 1F            [ 4]  124 	rra
   0062 1F            [ 4]  125 	rra
   0063 1F            [ 4]  126 	rra
   0064 1F            [ 4]  127 	rra
   0065                     128 .c2:
   0065 F6 F0         [ 7]  129 	or #0xF0
   0067 27            [ 4]  130 	daa
   0068 C6 A0         [ 7]  131 	add a, #0xA0
   006A CE 40         [ 7]  132 	adc a, #0x40 ; Ascii hex at this point (0 to F)   
   006C C9            [10]  133 	ret
                            134 ; len - get string length in bc
   006D                     135 strlen::
   006D E5            [11]  136 	push hl
   006E D5            [11]  137 	push de
   006F E5            [11]  138 	push hl
   0070 3E 00         [ 7]  139 	ld a, #0
   0072 ED B1         [21]  140 	cpir
   0074 D1            [10]  141 	pop de
   0075 B7            [ 4]  142 	or a
   0076 ED 52         [15]  143 	sbc hl, de 
   0078 44            [ 4]  144 	ld b, h
   0079 4D            [ 4]  145 	ld c, l
   007A 62            [ 4]  146 	ld h, d
   007B 6B            [ 4]  147 	ld l, e
   007C D1            [10]  148 	pop de
   007D E1            [10]  149 	pop hl
   007E C9            [10]  150 	ret
                            151 ; uart_send - send A to UART
   007F                     152 uart_send::
   007F F5            [11]  153 	push af
   0080                     154 .s:
   0080 DB 05         [11]  155 	in a, (#5)
   0082 E6 20         [ 7]  156 	and a, #32
   0084 28 FA         [12]  157 	jr z, .s
   0086 F1            [10]  158 	pop af
   0087 D3 00         [11]  159 	out (#0), a
   0089 C9            [10]  160 	ret
                            161 ; ostream - hl points to data to send
   008A                     162 ostream::
   008A F5            [11]  163 	push af
   008B E5            [11]  164 	push hl
   008C                     165 ostream_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



   008C 7E            [ 7]  166 	ld a, (hl)
   008D B7            [ 4]  167 	or a
   008E CA 97 00      [10]  168 	jp z, ostream_done
   0091 CD 7F 00      [17]  169 	call uart_send
   0094 23            [ 6]  170 	inc hl
   0095 18 F5         [12]  171 	jr ostream_loop
   0097                     172 ostream_done:
   0097 E1            [10]  173 	pop hl
   0098 F1            [10]  174 	pop af
   0099 C9            [10]  175 	ret
                            176 
                            177 ; print - hl points to string to print on screen
                            178 
   009A                     179 uart_print::
   009A CD 8A 00      [17]  180 	call ostream
   009D 3E 0D         [ 7]  181 	ld a, #13
   009F CD 7F 00      [17]  182 	call uart_send
   00A2 C9            [10]  183 	ret
                            184 ; input_uart - receive string from UART and store it in HL
   00A3                     185 uart_input::
   00A3 E5            [11]  186 	push hl
   00A4                     187 .lopen:
   00A4 DB 05         [11]  188 	in a, (#5)
   00A6 CB 47         [ 8]  189 	bit #0, a
   00A8 CA A4 00      [10]  190 	jp z, .lopen
   00AB DB 00         [11]  191 	in a, (#0)
   00AD FE 08         [ 7]  192 	cp #8
   00AF CA BE 00      [10]  193 	jp z, .delete
   00B2 D3 00         [11]  194 	out (#0), a
   00B4 FE 0D         [ 7]  195 	cp #13
   00B6 CA D0 00      [10]  196 	jp z, .done
   00B9 77            [ 7]  197 	ld (hl), a
   00BA 23            [ 6]  198 	inc hl
   00BB C3 A4 00      [10]  199 	jp .lopen
   00BE                     200 .delete:
   00BE 2B            [ 6]  201 	dec hl
   00BF 3E 08         [ 7]  202 	ld a, #8
   00C1 CD 7F 00      [17]  203 	call uart_send
   00C4 3E 20         [ 7]  204 	ld a, #32
   00C6 CD 7F 00      [17]  205 	call uart_send
   00C9 3E 08         [ 7]  206 	ld a, #8
   00CB CD 7F 00      [17]  207 	call uart_send
   00CE 18 D4         [12]  208 	jr .lopen
   00D0                     209 .done:
   00D0 AF            [ 4]  210 	xor a
   00D1 77            [ 7]  211 	ld (hl), a
   00D2 E1            [10]  212 	pop hl
   00D3 C9            [10]  213 	ret
                            214 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]

Symbol Table

    .__.$$$.=  2710 L   |     .__.ABS.=  0000 G   |     .__.CPU.=  0000 L
    .__.H$L.=  0000 L   |   0 .c1        0061 R   |   0 .c2        0065 R
  0 .delete    00BE R   |   0 .done      00D0 R   |   0 .equal     003F R
  0 .hlt       0026 R   |   0 .lopen     00A4 R   |   0 .s         0080 R
  0 .strcomp   002C R   |   0 .strcret   0037 R   |   1 _main      0000 GR
    _osstart   **** GX  |     gsinit     **** GX  |   1 int38      0038 GR
  0 int_to_h   0041 GR  |   0 os_start   0000 GR  |   0 ostream    008A GR
  0 ostream_   0097 R   |   0 ostream_   008C R   |   0 strcomp    002A GR
  0 strlen     006D GR  |   0 uart_inp   00A3 GR  |   0 uart_pri   009A GR
  0 uart_sen   007F GR  |   1 vectors    0000 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]

Area Table

   0 _CODE      size   D4   flags    0
   1 HOME       size   4D   flags    0

