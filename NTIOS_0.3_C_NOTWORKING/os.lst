                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init
                             13 	.globl _uart_print
                             14 	.globl _uart_write
                             15 	.globl _hex_conv
                             16 	.globl _vars
                             17 	.globl _heap_vars
                             18 	.globl _heap_top
                             19 	.globl _alloc
                             20 	.globl _mem_setup
                             21 	.globl _uart_println
                             22 	.globl _uart_setup
                             23 	.globl _uart_input
                             24 	.globl _strcomp
                             25 	.globl _hex_short
                             26 	.globl _hex_byte
                             27 	.globl _len
                             28 ;--------------------------------------------------------
                             29 ; special function registers
                             30 ;--------------------------------------------------------
                     0000    31 _UART_0	=	0x0000
                     0001    32 _UART_1	=	0x0001
                     0002    33 _UART_2	=	0x0002
                     0003    34 _UART_3	=	0x0003
                     0004    35 _UART_4	=	0x0004
                     0005    36 _UART_5	=	0x0005
                     0006    37 _UART_6	=	0x0006
                     0007    38 _UART_7	=	0x0007
                             39 ;--------------------------------------------------------
                             40 ; ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DATA
   0000                      43 _heap_top::
   0000                      44 	.ds 2
   0002                      45 _heap_vars::
   0002                      46 	.ds 2
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _INITIALIZED
   0000                      51 _vars::
   0000                      52 	.ds 2
   0002                      53 _hex_conv::
   0002                      54 	.ds 2
                             55 ;--------------------------------------------------------
                             56 ; absolute external ram data
                             57 ;--------------------------------------------------------
                             58 	.area _DABS (ABS)
                             59 ;--------------------------------------------------------
                             60 ; global & static initialisations
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _GSINIT
                             64 	.area _GSFINAL
                             65 	.area _GSINIT
                             66 ;--------------------------------------------------------
                             67 ; Home
                             68 ;--------------------------------------------------------
                             69 	.area _HOME
                             70 	.area _HOME
                             71 ;--------------------------------------------------------
                             72 ; code
                             73 ;--------------------------------------------------------
                             74 	.area _CODE
                             75 ;memory.c:5: char* alloc(int len){
                             76 ;	---------------------------------
                             77 ; Function alloc
                             78 ; ---------------------------------
   0000                      79 _alloc::
                             80 ;memory.c:6: char* buf=heap_vars[vars]=heap_top;
   0000 2Ar00r00      [16]   81 	ld	hl,(_vars)
   0003 29            [11]   82 	add	hl, hl
   0004 ED 5Br02r00   [20]   83 	ld	de,(_heap_vars)
   0008 19            [11]   84 	add	hl,de
   0009 FD 21r00r00   [14]   85 	ld	iy,#_heap_top
   000D FD 7E 00      [19]   86 	ld	a,0 (iy)
   0010 77            [ 7]   87 	ld	(hl),a
   0011 23            [ 6]   88 	inc	hl
   0012 FD 7E 01      [19]   89 	ld	a,1 (iy)
   0015 77            [ 7]   90 	ld	(hl),a
   0016 ED 4Br00r00   [20]   91 	ld	bc,(_heap_top)
                             92 ;memory.c:7: heap_top+=len;
   001A 21 02 00      [10]   93 	ld	hl,#2
   001D 39            [11]   94 	add	hl,sp
   001E D5            [11]   95 	push	de
   001F FD E5         [15]   96 	push	iy
   0021 D1            [10]   97 	pop	de
   0022 1A            [ 7]   98 	ld	a,(de)
   0023 86            [ 7]   99 	add	a, (hl)
   0024 12            [ 7]  100 	ld	(de),a
   0025 13            [ 6]  101 	inc	de
   0026 1A            [ 7]  102 	ld	a,(de)
   0027 23            [ 6]  103 	inc	hl
   0028 8E            [ 7]  104 	adc	a, (hl)
   0029 12            [ 7]  105 	ld	(de),a
   002A D1            [10]  106 	pop	de
                            107 ;memory.c:8: return buf;
   002B 69            [ 4]  108 	ld	l, c
   002C 60            [ 4]  109 	ld	h, b
   002D C9            [10]  110 	ret
                            111 ;memory.c:10: void mem_setup(char* heap_bottom){
                            112 ;	---------------------------------
                            113 ; Function mem_setup
                            114 ; ---------------------------------
   002E                     115 _mem_setup::
                            116 ;memory.c:11: heap_top=heap_bottom+512;
   002E 21r00r00      [10]  117 	ld	hl,#_heap_top
   0031 FD 21 02 00   [14]  118 	ld	iy,#2
   0035 FD 39         [15]  119 	add	iy,sp
   0037 FD 7E 00      [19]  120 	ld	a,0 (iy)
   003A C6 00         [ 7]  121 	add	a, #0x00
   003C 77            [ 7]  122 	ld	(hl),a
   003D FD 7E 01      [19]  123 	ld	a,1 (iy)
   0040 CE 02         [ 7]  124 	adc	a, #0x02
   0042 23            [ 6]  125 	inc	hl
   0043 77            [ 7]  126 	ld	(hl),a
                            127 ;memory.c:12: heap_vars=heap_bottom;
   0044 FD 7E 00      [19]  128 	ld	a,0 (iy)
   0047 32r02r00      [13]  129 	ld	(#_heap_vars + 0),a
   004A 21 03 00      [10]  130 	ld	hl, #2+1
   004D 39            [11]  131 	add	hl, sp
   004E 7E            [ 7]  132 	ld	a, (hl)
   004F 32r03r00      [13]  133 	ld	(#_heap_vars + 1),a
                            134 ;memory.c:13: vars=0;
   0052 21 00 00      [10]  135 	ld	hl,#0x0000
   0055 22r00r00      [16]  136 	ld	(_vars),hl
   0058 C9            [10]  137 	ret
                            138 ;uart.c:11: void uart_write(char a){
                            139 ;	---------------------------------
                            140 ; Function uart_write
                            141 ; ---------------------------------
   0059                     142 _uart_write::
                            143 ;uart.c:12: while(!(UART_5&32));
   0059                     144 00101$:
   0059 DB 05         [11]  145 	in	a,(_UART_5)
   005B E6 20         [ 7]  146 	and	a, #0x20
   005D 28 FA         [12]  147 	jr	Z,00101$
                            148 ;uart.c:13: UART_0=a;
   005F 21 02 00      [10]  149 	ld	hl, #2+0
   0062 39            [11]  150 	add	hl, sp
   0063 7E            [ 7]  151 	ld	a, (hl)
   0064 D3 00         [11]  152 	out	(_UART_0),a
   0066 C9            [10]  153 	ret
                            154 ;uart.c:15: void uart_print(char* a){
                            155 ;	---------------------------------
                            156 ; Function uart_print
                            157 ; ---------------------------------
   0067                     158 _uart_print::
                            159 ;uart.c:17: for(i=0;a[i]!=0;i++)
   0067 01 00 00      [10]  160 	ld	bc,#0x0000
   006A                     161 00103$:
   006A 21 02 00      [10]  162 	ld	hl, #2
   006D 39            [11]  163 	add	hl, sp
   006E 7E            [ 7]  164 	ld	a, (hl)
   006F 23            [ 6]  165 	inc	hl
   0070 66            [ 7]  166 	ld	h, (hl)
   0071 6F            [ 4]  167 	ld	l, a
   0072 09            [11]  168 	add	hl,bc
   0073 56            [ 7]  169 	ld	d,(hl)
   0074 7A            [ 4]  170 	ld	a,d
   0075 B7            [ 4]  171 	or	a, a
   0076 C8            [11]  172 	ret	Z
                            173 ;uart.c:18: uart_write(a[i]);
   0077 C5            [11]  174 	push	bc
   0078 D5            [11]  175 	push	de
   0079 33            [ 6]  176 	inc	sp
   007A CDr59r00      [17]  177 	call	_uart_write
   007D 33            [ 6]  178 	inc	sp
   007E C1            [10]  179 	pop	bc
                            180 ;uart.c:17: for(i=0;a[i]!=0;i++)
   007F 03            [ 6]  181 	inc	bc
   0080 18 E8         [12]  182 	jr	00103$
                            183 ;uart.c:20: void uart_println(char* a){
                            184 ;	---------------------------------
                            185 ; Function uart_println
                            186 ; ---------------------------------
   0082                     187 _uart_println::
                            188 ;uart.c:22: for(i=0;a[i]!=0;i++)
   0082 01 00 00      [10]  189 	ld	bc,#0x0000
   0085                     190 00103$:
   0085 21 02 00      [10]  191 	ld	hl, #2
   0088 39            [11]  192 	add	hl, sp
   0089 7E            [ 7]  193 	ld	a, (hl)
   008A 23            [ 6]  194 	inc	hl
   008B 66            [ 7]  195 	ld	h, (hl)
   008C 6F            [ 4]  196 	ld	l, a
   008D 09            [11]  197 	add	hl,bc
   008E 56            [ 7]  198 	ld	d,(hl)
   008F 7A            [ 4]  199 	ld	a,d
   0090 B7            [ 4]  200 	or	a, a
   0091 28 0B         [12]  201 	jr	Z,00101$
                            202 ;uart.c:23: uart_write(a[i]);
   0093 C5            [11]  203 	push	bc
   0094 D5            [11]  204 	push	de
   0095 33            [ 6]  205 	inc	sp
   0096 CDr59r00      [17]  206 	call	_uart_write
   0099 33            [ 6]  207 	inc	sp
   009A C1            [10]  208 	pop	bc
                            209 ;uart.c:22: for(i=0;a[i]!=0;i++)
   009B 03            [ 6]  210 	inc	bc
   009C 18 E7         [12]  211 	jr	00103$
   009E                     212 00101$:
                            213 ;uart.c:24: uart_write(0x0D);
   009E 3E 0D         [ 7]  214 	ld	a,#0x0d
   00A0 F5            [11]  215 	push	af
   00A1 33            [ 6]  216 	inc	sp
   00A2 CDr59r00      [17]  217 	call	_uart_write
   00A5 33            [ 6]  218 	inc	sp
   00A6 C9            [10]  219 	ret
                            220 ;uart.c:26: void uart_setup(){
                            221 ;	---------------------------------
                            222 ; Function uart_setup
                            223 ; ---------------------------------
   00A7                     224 _uart_setup::
                            225 ;uart.c:27: UART_3=0x80;
   00A7 3E 80         [ 7]  226 	ld	a,#0x80
   00A9 D3 03         [11]  227 	out	(_UART_3),a
                            228 ;uart.c:28: UART_0=0x0A;
   00AB 3E 0A         [ 7]  229 	ld	a,#0x0a
   00AD D3 00         [11]  230 	out	(_UART_0),a
                            231 ;uart.c:29: UART_1=0x00;      
   00AF 3E 00         [ 7]  232 	ld	a,#0x00
   00B1 D3 01         [11]  233 	out	(_UART_1),a
                            234 ;uart.c:30: UART_3=0x03;
   00B3 3E 03         [ 7]  235 	ld	a,#0x03
   00B5 D3 03         [11]  236 	out	(_UART_3),a
                            237 ;uart.c:31: UART_2=0x01;
   00B7 3E 01         [ 7]  238 	ld	a,#0x01
   00B9 D3 02         [11]  239 	out	(_UART_2),a
                            240 ;uart.c:32: uart_write(0);
   00BB AF            [ 4]  241 	xor	a, a
   00BC F5            [11]  242 	push	af
   00BD 33            [ 6]  243 	inc	sp
   00BE CDr59r00      [17]  244 	call	_uart_write
   00C1 33            [ 6]  245 	inc	sp
   00C2 C9            [10]  246 	ret
                            247 ;uart.c:34: void uart_input(char* buf){
                            248 ;	---------------------------------
                            249 ; Function uart_input
                            250 ; ---------------------------------
   00C3                     251 _uart_input::
                            252 ;uart.c:37: while(UART_5&1);
   00C3 0E 00         [ 7]  253 	ld	c,#0x00
   00C5                     254 00101$:
   00C5 DB 05         [11]  255 	in	a,(_UART_5)
   00C7 0F            [ 4]  256 	rrca
   00C8 38 FB         [12]  257 	jr	C,00101$
                            258 ;uart.c:38: c=UART_0;
   00CA DB 00         [11]  259 	in	a,(_UART_0)
                            260 ;uart.c:39: if(c==0x0D)
   00CC 47            [ 4]  261 	ld	b,a
   00CD D6 0D         [ 7]  262 	sub	a, #0x0d
   00CF 28 19         [12]  263 	jr	Z,00106$
                            264 ;uart.c:41: buf[i]=c;
   00D1 FD 21 02 00   [14]  265 	ld	iy,#2
   00D5 FD 39         [15]  266 	add	iy,sp
   00D7 FD 7E 00      [19]  267 	ld	a,0 (iy)
   00DA 81            [ 4]  268 	add	a, c
   00DB 5F            [ 4]  269 	ld	e,a
   00DC FD 7E 01      [19]  270 	ld	a,1 (iy)
   00DF CE 00         [ 7]  271 	adc	a, #0x00
   00E1 57            [ 4]  272 	ld	d,a
   00E2 78            [ 4]  273 	ld	a,b
   00E3 12            [ 7]  274 	ld	(de),a
                            275 ;uart.c:36: for(i=0;i<127;i++){
   00E4 0C            [ 4]  276 	inc	c
   00E5 79            [ 4]  277 	ld	a,c
   00E6 D6 7F         [ 7]  278 	sub	a, #0x7f
   00E8 38 DB         [12]  279 	jr	C,00101$
   00EA                     280 00106$:
                            281 ;uart.c:43: i++;
   00EA 0C            [ 4]  282 	inc	c
                            283 ;uart.c:44: buf[i]=0;
   00EB 21 02 00      [10]  284 	ld	hl, #2
   00EE 39            [11]  285 	add	hl, sp
   00EF 7E            [ 7]  286 	ld	a, (hl)
   00F0 23            [ 6]  287 	inc	hl
   00F1 66            [ 7]  288 	ld	h, (hl)
   00F2 6F            [ 4]  289 	ld	l, a
   00F3 06 00         [ 7]  290 	ld	b,#0x00
   00F5 09            [11]  291 	add	hl, bc
   00F6 36 00         [10]  292 	ld	(hl),#0x00
   00F8 C9            [10]  293 	ret
                            294 ;string.c:3: unsigned char strcomp(char* a, char* b){
                            295 ;	---------------------------------
                            296 ; Function strcomp
                            297 ; ---------------------------------
   00F9                     298 _strcomp::
   00F9 DD E5         [15]  299 	push	ix
   00FB DD 21 00 00   [14]  300 	ld	ix,#0
   00FF DD 39         [15]  301 	add	ix,sp
                            302 ;string.c:5: for(i=0;a[i-1]!=0;i++)
   0101 01 00 00      [10]  303 	ld	bc,#0x0000
   0104                     304 00105$:
   0104 59            [ 4]  305 	ld	e,c
   0105 50            [ 4]  306 	ld	d,b
   0106 1B            [ 6]  307 	dec	de
   0107 DD 6E 04      [19]  308 	ld	l,4 (ix)
   010A DD 66 05      [19]  309 	ld	h,5 (ix)
   010D 19            [11]  310 	add	hl,de
   010E 7E            [ 7]  311 	ld	a,(hl)
   010F B7            [ 4]  312 	or	a, a
   0110 28 1B         [12]  313 	jr	Z,00103$
                            314 ;string.c:6: if(a[i]!=b[i])
   0112 DD 6E 04      [19]  315 	ld	l,4 (ix)
   0115 DD 66 05      [19]  316 	ld	h,5 (ix)
   0118 09            [11]  317 	add	hl,bc
   0119 5E            [ 7]  318 	ld	e,(hl)
   011A DD 6E 06      [19]  319 	ld	l,6 (ix)
   011D DD 66 07      [19]  320 	ld	h,7 (ix)
   0120 09            [11]  321 	add	hl,bc
   0121 56            [ 7]  322 	ld	d,(hl)
   0122 7B            [ 4]  323 	ld	a,e
   0123 92            [ 4]  324 	sub	a, d
   0124 28 04         [12]  325 	jr	Z,00106$
                            326 ;string.c:7: return 0;
   0126 2E 00         [ 7]  327 	ld	l,#0x00
   0128 18 05         [12]  328 	jr	00107$
   012A                     329 00106$:
                            330 ;string.c:5: for(i=0;a[i-1]!=0;i++)
   012A 03            [ 6]  331 	inc	bc
   012B 18 D7         [12]  332 	jr	00105$
   012D                     333 00103$:
                            334 ;string.c:8: return 1;
   012D 2E 01         [ 7]  335 	ld	l,#0x01
   012F                     336 00107$:
   012F DD E1         [14]  337 	pop	ix
   0131 C9            [10]  338 	ret
                            339 ;string.c:11: char* hex_short(unsigned short a){
                            340 ;	---------------------------------
                            341 ; Function hex_short
                            342 ; ---------------------------------
   0132                     343 _hex_short::
   0132 DD E5         [15]  344 	push	ix
   0134 DD 21 00 00   [14]  345 	ld	ix,#0
   0138 DD 39         [15]  346 	add	ix,sp
   013A F5            [11]  347 	push	af
                            348 ;string.c:12: char* buf=alloc(7);
   013B 21 07 00      [10]  349 	ld	hl,#0x0007
   013E E5            [11]  350 	push	hl
   013F CDr00r00      [17]  351 	call	_alloc
   0142 F1            [10]  352 	pop	af
                            353 ;string.c:13: buf[0]='0';
   0143 4D            [ 4]  354 	ld	c,l
   0144 44            [ 4]  355 	ld	b,h
   0145 36 30         [10]  356 	ld	(hl),#0x30
                            357 ;string.c:14: buf[1]='x';
   0147 69            [ 4]  358 	ld	l, c
   0148 60            [ 4]  359 	ld	h, b
   0149 23            [ 6]  360 	inc	hl
   014A 36 78         [10]  361 	ld	(hl),#0x78
                            362 ;string.c:15: buf[2]=hex_conv[a>>12];
   014C 59            [ 4]  363 	ld	e, c
   014D 50            [ 4]  364 	ld	d, b
   014E 13            [ 6]  365 	inc	de
   014F 13            [ 6]  366 	inc	de
   0150 DD 7E 05      [19]  367 	ld	a,5 (ix)
   0153 07            [ 4]  368 	rlca
   0154 07            [ 4]  369 	rlca
   0155 07            [ 4]  370 	rlca
   0156 07            [ 4]  371 	rlca
   0157 E6 0F         [ 7]  372 	and	a,#0x0f
   0159 DD 77 FE      [19]  373 	ld	-2 (ix),a
   015C DD 36 FF 00   [19]  374 	ld	-1 (ix),#0x00
   0160 FD 2Ar02r00   [20]  375 	ld	iy,(_hex_conv)
   0164 C5            [11]  376 	push	bc
   0165 DD 4E FE      [19]  377 	ld	c,-2 (ix)
   0168 DD 46 FF      [19]  378 	ld	b,-1 (ix)
   016B FD 09         [15]  379 	add	iy, bc
   016D C1            [10]  380 	pop	bc
   016E FD 7E 00      [19]  381 	ld	a, 0 (iy)
   0171 12            [ 7]  382 	ld	(de),a
                            383 ;string.c:16: buf[3]=hex_conv[(a>>8)&0xF];
   0172 21 03 00      [10]  384 	ld	hl,#0x0003
   0175 09            [11]  385 	add	hl,bc
   0176 E3            [19]  386 	ex	(sp), hl
   0177 DD 7E 05      [19]  387 	ld	a, 5 (ix)
   017A E6 0F         [ 7]  388 	and	a, #0x0f
   017C 5F            [ 4]  389 	ld	e,a
   017D 16 00         [ 7]  390 	ld	d,#0x00
   017F FD 2Ar02r00   [20]  391 	ld	iy,(_hex_conv)
   0183 FD 19         [15]  392 	add	iy, de
   0185 FD 5E 00      [19]  393 	ld	e, 0 (iy)
   0188 E1            [10]  394 	pop	hl
   0189 E5            [11]  395 	push	hl
   018A 73            [ 7]  396 	ld	(hl),e
                            397 ;string.c:17: buf[4]=hex_conv[(a>>4)&0xF];
   018B 21 04 00      [10]  398 	ld	hl,#0x0004
   018E 09            [11]  399 	add	hl,bc
   018F E3            [19]  400 	ex	(sp), hl
   0190 DD 5E 04      [19]  401 	ld	e,4 (ix)
   0193 DD 56 05      [19]  402 	ld	d,5 (ix)
   0196 CB 3A         [ 8]  403 	srl	d
   0198 CB 1B         [ 8]  404 	rr	e
   019A CB 3A         [ 8]  405 	srl	d
   019C CB 1B         [ 8]  406 	rr	e
   019E CB 3A         [ 8]  407 	srl	d
   01A0 CB 1B         [ 8]  408 	rr	e
   01A2 CB 3A         [ 8]  409 	srl	d
   01A4 CB 1B         [ 8]  410 	rr	e
   01A6 7B            [ 4]  411 	ld	a,e
   01A7 E6 0F         [ 7]  412 	and	a, #0x0f
   01A9 5F            [ 4]  413 	ld	e,a
   01AA 16 00         [ 7]  414 	ld	d,#0x00
   01AC FD 2Ar02r00   [20]  415 	ld	iy,(_hex_conv)
   01B0 FD 19         [15]  416 	add	iy, de
   01B2 FD 5E 00      [19]  417 	ld	e, 0 (iy)
   01B5 E1            [10]  418 	pop	hl
   01B6 E5            [11]  419 	push	hl
   01B7 73            [ 7]  420 	ld	(hl),e
                            421 ;string.c:18: buf[5]=hex_conv[a&0xF];
   01B8 21 05 00      [10]  422 	ld	hl,#0x0005
   01BB 09            [11]  423 	add	hl,bc
   01BC E3            [19]  424 	ex	(sp), hl
   01BD DD 7E 04      [19]  425 	ld	a,4 (ix)
   01C0 E6 0F         [ 7]  426 	and	a, #0x0f
   01C2 5F            [ 4]  427 	ld	e,a
   01C3 16 00         [ 7]  428 	ld	d,#0x00
   01C5 FD 2Ar02r00   [20]  429 	ld	iy,(_hex_conv)
   01C9 FD 19         [15]  430 	add	iy, de
   01CB FD 5E 00      [19]  431 	ld	e, 0 (iy)
   01CE E1            [10]  432 	pop	hl
   01CF E5            [11]  433 	push	hl
   01D0 73            [ 7]  434 	ld	(hl),e
                            435 ;string.c:19: buf[6]=0;
   01D1 21 06 00      [10]  436 	ld	hl,#0x0006
   01D4 09            [11]  437 	add	hl,bc
   01D5 36 00         [10]  438 	ld	(hl),#0x00
                            439 ;string.c:20: return buf;
   01D7 69            [ 4]  440 	ld	l, c
   01D8 60            [ 4]  441 	ld	h, b
   01D9 DD F9         [10]  442 	ld	sp, ix
   01DB DD E1         [14]  443 	pop	ix
   01DD C9            [10]  444 	ret
                            445 ;string.c:22: char* hex_byte(unsigned char a){
                            446 ;	---------------------------------
                            447 ; Function hex_byte
                            448 ; ---------------------------------
   01DE                     449 _hex_byte::
   01DE DD E5         [15]  450 	push	ix
   01E0 DD 21 00 00   [14]  451 	ld	ix,#0
   01E4 DD 39         [15]  452 	add	ix,sp
   01E6 3B            [ 6]  453 	dec	sp
                            454 ;string.c:23: char* buf=alloc(5);
   01E7 21 05 00      [10]  455 	ld	hl,#0x0005
   01EA E5            [11]  456 	push	hl
   01EB CDr00r00      [17]  457 	call	_alloc
   01EE F1            [10]  458 	pop	af
                            459 ;string.c:24: buf[0]='0';
   01EF 4D            [ 4]  460 	ld	c,l
   01F0 44            [ 4]  461 	ld	b,h
   01F1 36 30         [10]  462 	ld	(hl),#0x30
                            463 ;string.c:25: buf[1]='x';
   01F3 69            [ 4]  464 	ld	l, c
   01F4 60            [ 4]  465 	ld	h, b
   01F5 23            [ 6]  466 	inc	hl
   01F6 36 78         [10]  467 	ld	(hl),#0x78
                            468 ;string.c:26: buf[2]=hex_conv[(a>>4)&0xF];
   01F8 59            [ 4]  469 	ld	e, c
   01F9 50            [ 4]  470 	ld	d, b
   01FA 13            [ 6]  471 	inc	de
   01FB 13            [ 6]  472 	inc	de
   01FC DD 7E 04      [19]  473 	ld	a,4 (ix)
   01FF 07            [ 4]  474 	rlca
   0200 07            [ 4]  475 	rlca
   0201 07            [ 4]  476 	rlca
   0202 07            [ 4]  477 	rlca
   0203 E6 0F         [ 7]  478 	and	a,#0x0f
   0205 E6 0F         [ 7]  479 	and	a, #0x0f
   0207 DD 77 FF      [19]  480 	ld	-1 (ix),a
   020A FD 2Ar02r00   [20]  481 	ld	iy,(_hex_conv)
   020E C5            [11]  482 	push	bc
   020F DD 4E FF      [19]  483 	ld	c,-1 (ix)
   0212 06 00         [ 7]  484 	ld	b,#0x00
   0214 FD 09         [15]  485 	add	iy, bc
   0216 C1            [10]  486 	pop	bc
   0217 FD 7E 00      [19]  487 	ld	a, 0 (iy)
   021A 12            [ 7]  488 	ld	(de),a
                            489 ;string.c:27: buf[3]=hex_conv[a&0xF];
   021B 59            [ 4]  490 	ld	e, c
   021C 50            [ 4]  491 	ld	d, b
   021D 13            [ 6]  492 	inc	de
   021E 13            [ 6]  493 	inc	de
   021F 13            [ 6]  494 	inc	de
   0220 DD 7E 04      [19]  495 	ld	a,4 (ix)
   0223 E6 0F         [ 7]  496 	and	a, #0x0f
   0225 DD 77 FF      [19]  497 	ld	-1 (ix),a
   0228 FD 2Ar02r00   [20]  498 	ld	iy,(_hex_conv)
   022C C5            [11]  499 	push	bc
   022D DD 4E FF      [19]  500 	ld	c,-1 (ix)
   0230 06 00         [ 7]  501 	ld	b,#0x00
   0232 FD 09         [15]  502 	add	iy, bc
   0234 C1            [10]  503 	pop	bc
   0235 FD 7E 00      [19]  504 	ld	a, 0 (iy)
   0238 12            [ 7]  505 	ld	(de),a
                            506 ;string.c:28: buf[4]=0;
   0239 21 04 00      [10]  507 	ld	hl,#0x0004
   023C 09            [11]  508 	add	hl,bc
   023D 36 00         [10]  509 	ld	(hl),#0x00
                            510 ;string.c:29: return buf;
   023F 69            [ 4]  511 	ld	l, c
   0240 60            [ 4]  512 	ld	h, b
   0241 33            [ 6]  513 	inc	sp
   0242 DD E1         [14]  514 	pop	ix
   0244 C9            [10]  515 	ret
                            516 ;string.c:31: int len(char* str){
                            517 ;	---------------------------------
                            518 ; Function len
                            519 ; ---------------------------------
   0245                     520 _len::
                            521 ;string.c:33: for(i;str[i]!=0;i++);
   0245 01 00 00      [10]  522 	ld	bc,#0x0000
   0248                     523 00103$:
   0248 21 02 00      [10]  524 	ld	hl, #2
   024B 39            [11]  525 	add	hl, sp
   024C 7E            [ 7]  526 	ld	a, (hl)
   024D 23            [ 6]  527 	inc	hl
   024E 66            [ 7]  528 	ld	h, (hl)
   024F 6F            [ 4]  529 	ld	l, a
   0250 09            [11]  530 	add	hl,bc
   0251 7E            [ 7]  531 	ld	a,(hl)
   0252 B7            [ 4]  532 	or	a, a
   0253 28 03         [12]  533 	jr	Z,00101$
   0255 03            [ 6]  534 	inc	bc
   0256 18 F0         [12]  535 	jr	00103$
   0258                     536 00101$:
                            537 ;string.c:34: return i;
   0258 69            [ 4]  538 	ld	l, c
   0259 60            [ 4]  539 	ld	h, b
   025A C9            [10]  540 	ret
                            541 ;main.c:5: void init() __critical{
                            542 ;	---------------------------------
                            543 ; Function init
                            544 ; ---------------------------------
   025B                     545 _init::
   025B ED 57         [ 9]  546 	ld	a,i
   025D F3            [ 4]  547 	di
   025E F5            [11]  548 	push	af
                            549 ;main.c:6: uart_setup();
   025F CDrA7r00      [17]  550 	call	_uart_setup
                            551 ;main.c:7: mem_setup((char*)0x8000);
   0262 21 00 80      [10]  552 	ld	hl,#0x8000
   0265 E5            [11]  553 	push	hl
   0266 CDr2Er00      [17]  554 	call	_mem_setup
   0269 F1            [10]  555 	pop	af
   026A F1            [10]  556 	pop	af
   026B E0            [11]  557 	ret	PO
   026C FB            [ 4]  558 	ei
   026D C9            [10]  559 	ret
                            560 ;main.c:9: void main(){
                            561 ;	---------------------------------
                            562 ; Function main
                            563 ; ---------------------------------
   026E                     564 _main::
                            565 ;main.c:11: init();
   026E CDr5Br02      [17]  566 	call	_init
                            567 ;main.c:12: kbdbuff=alloc(128);
   0271 21 80 00      [10]  568 	ld	hl,#0x0080
   0274 E5            [11]  569 	push	hl
   0275 CDr00r00      [17]  570 	call	_alloc
   0278 F1            [10]  571 	pop	af
                            572 ;main.c:13: uart_print("Khalo le monden!");
   0279 01rC4r02      [10]  573 	ld	bc,#___str_0+0
   027C E5            [11]  574 	push	hl
   027D C5            [11]  575 	push	bc
   027E CDr67r00      [17]  576 	call	_uart_print
   0281 F1            [10]  577 	pop	af
   0282 E1            [10]  578 	pop	hl
                            579 ;main.c:14: while(true){
   0283                     580 00104$:
                            581 ;main.c:15: uart_print("> ");
   0283 01rD5r02      [10]  582 	ld	bc,#___str_1+0
   0286 E5            [11]  583 	push	hl
   0287 C5            [11]  584 	push	bc
   0288 CDr67r00      [17]  585 	call	_uart_print
   028B F1            [10]  586 	pop	af
   028C E1            [10]  587 	pop	hl
                            588 ;main.c:16: uart_input(kbdbuff);
   028D E5            [11]  589 	push	hl
   028E E5            [11]  590 	push	hl
   028F CDrC3r00      [17]  591 	call	_uart_input
   0292 F1            [10]  592 	pop	af
   0293 E1            [10]  593 	pop	hl
                            594 ;main.c:17: if(strcomp(kbdbuff,"help")){
   0294 01rD8r02      [10]  595 	ld	bc,#___str_2+0
   0297 E5            [11]  596 	push	hl
   0298 C5            [11]  597 	push	bc
   0299 E5            [11]  598 	push	hl
   029A CDrF9r00      [17]  599 	call	_strcomp
   029D F1            [10]  600 	pop	af
   029E F1            [10]  601 	pop	af
   029F 7D            [ 4]  602 	ld	a,l
   02A0 E1            [10]  603 	pop	hl
   02A1 B7            [ 4]  604 	or	a, a
   02A2 28 DF         [12]  605 	jr	Z,00104$
                            606 ;main.c:18: uart_println(" -- NTIOS 0.3 --");
   02A4 01rDDr02      [10]  607 	ld	bc,#___str_3+0
   02A7 E5            [11]  608 	push	hl
   02A8 C5            [11]  609 	push	bc
   02A9 CDr82r00      [17]  610 	call	_uart_println
   02AC F1            [10]  611 	pop	af
   02AD E1            [10]  612 	pop	hl
                            613 ;main.c:19: uart_println("   Commands:");
   02AE 01rEEr02      [10]  614 	ld	bc,#___str_4+0
   02B1 E5            [11]  615 	push	hl
   02B2 C5            [11]  616 	push	bc
   02B3 CDr82r00      [17]  617 	call	_uart_println
   02B6 F1            [10]  618 	pop	af
   02B7 E1            [10]  619 	pop	hl
                            620 ;main.c:20: uart_println("     help       | You know what this does.");
   02B8 01rFBr02      [10]  621 	ld	bc,#___str_5+0
   02BB E5            [11]  622 	push	hl
   02BC C5            [11]  623 	push	bc
   02BD CDr82r00      [17]  624 	call	_uart_println
   02C0 F1            [10]  625 	pop	af
   02C1 E1            [10]  626 	pop	hl
   02C2 18 BF         [12]  627 	jr	00104$
   02C4                     628 ___str_0:
   02C4 4B 68 61 6C 6F 20   629 	.ascii "Khalo le monden!"
        6C 65 20 6D 6F 6E
        64 65 6E 21
   02D4 00                  630 	.db 0x00
   02D5                     631 ___str_1:
   02D5 3E 20               632 	.ascii "> "
   02D7 00                  633 	.db 0x00
   02D8                     634 ___str_2:
   02D8 68 65 6C 70         635 	.ascii "help"
   02DC 00                  636 	.db 0x00
   02DD                     637 ___str_3:
   02DD 20 2D 2D 20 4E 54   638 	.ascii " -- NTIOS 0.3 --"
        49 4F 53 20 30 2E
        33 20 2D 2D
   02ED 00                  639 	.db 0x00
   02EE                     640 ___str_4:
   02EE 20 20 20 43 6F 6D   641 	.ascii "   Commands:"
        6D 61 6E 64 73 3A
   02FA 00                  642 	.db 0x00
   02FB                     643 ___str_5:
   02FB 20 20 20 20 20 68   644 	.ascii "     help       | You know what this does."
        65 6C 70 20 20 20
        20 20 20 20 7C 20
        59 6F 75 20 6B 6E
        6F 77 20 77 68 61
        74 20 74 68 69 73
        20 64 6F 65 73 2E
   0325 00                  645 	.db 0x00
                            646 	.area _CODE
   0326                     647 ___str_6:
   0326 30 31 32 33 35 36   648 	.ascii "012356789ABCDEF"
        37 38 39 41 42 43
        44 45 46
   0335 00                  649 	.db 0x00
                            650 	.area _INITIALIZER
   0000                     651 __xinit__vars:
   0000 00 00               652 	.dw #0x0000
   0002                     653 __xinit__hex_conv:
   0002r26r03               654 	.dw ___str_6
                            655 	.area _CABS (ABS)
