;  Origionally from some old OS design I made.
; Then became MinOS
; Kernel reused in NTIOS 0.1
; Kernel heavily modified NTIOS 0.2
; Copyright Dylan Brophy 2017
;
org $0000
; CONFIGURATION
print: equ uart_print ; send text data where?
input: equ uart_input ; get user input from?
send:  equ uart_send  ; send chars to?
reboot: equ os_start

ssd_writable: equ 1
stack_top:     equ $FFFF


ide_port:      equ $8
keyboard_port: equ $20 ; where is the keyboard in IO land?


vectors:
	jp os_start ; 0000 (reboot)
	jp ostream  ; 0003
	jp print    ; 0006
	jp alloc    ; 0009
	jp 0;delete   000C
	jp strcomp  ; 000F
	jp input    ; 0012
	jp 0000     ; 0015
	jp 0000;endpgm   ; 0018
	
	jp 0000     ; 001B
	jp 0000     ; 001E
	jp 0000     ; 0021
	jp 0000     ; 0024
	nop
	jp 0000     ; 0028
	jp 0000     ; 002B
	jp 0000     ; 002E
	jp 0000     ; 0031
	jp 0000     ; 0034
nop             ; 0037
int38:          ; 0038, Z80 interrupt mode 1 vector
	push hl
	push af
	push de
	push bc
	push ix
	push iy
	;jp 55 ; lol
	
	pop iy
	pop ix
	pop bc
	pop de
	pop af
	pop hl
	reti
os_start:
	di
	ld sp, stack_top
	ld hl, 0
	call memory_init
	;ld a, 0x38
	;call byte_to_hex
	;ld hl, (heap_top)
	;call int_to_hex
	; Hardware (UART) setup if using 18.43MHz clock
	ld a, $80 
	out (3), a			; SET DLAB
	ld a, 10			; 115200 baud
	out (0), a
	ld a, 0
	out (1), a        
	ld a, 3
	out (3), a          ; 8-bit serial, RESET DLAB
	ld a, 1
	out (2), a          ; enable FIFOs
	
	ld a, 0
	call uart_send
	
	im 1
	ei
	
PD7P: equ 0x80
	xor a
	out (PD7P+1),a
	in a, (PD7P)
	call byte_to_hex
	call ostream
	ld c, 8
	ld hl, PD_init
.lopen1:
	in a, (PD7P)
	and 2
	jp nz, .lopen1
	ld a, (hl)
	inc hl
	dec c
	jp nz, .lopen1
.loaded:
	ld a, 0x9B
	call wcmd
	ld a, 0x30
	call wcmd
	ld a, 0x5A
	call wparam
	ld a, 0xB0
	call wcmd
.L2:
	in a, (PD7P)
	and 1
	jp z, .L2
	in a, (PD7P+1)
	call byte_to_hex
	call ostream
	
	jp terminal_pgm     ; start terminal program! WOOO!
wcmd:
	push af
.l:
	in a, (PD7P)
	and 2
	jp nz,.l
	pop af
	out (PD7P+1),a
	ret
wparam:
	push af
.l:
	in a, (PD7P)
	and 2
	jp nz,.l
	pop af
	out (PD7P),a
	ret
system_error:
	call print
	ld hl, .msg
	call print
	call input
	jp 0
.msg: db "Computer will not recover, press enter to reboot.", 0
INCLUDE "string.z80"
INCLUDE "uart.z80"
INCLUDE "memory.z80"
INCLUDE "keyboard.z80"
INCLUDE "ssd.z80"
INCLUDE "IDE.z80"
INCLUDE "FAT.z80"
INCLUDE "misc.z80"
cmd_help:          db "help", 0
helpstr:           db "cls, mem, dir, reboot, open", 0
terminal_pgm:
	ld hl, term_start_string   ; pleasantly start the terminal
	call print
.loop:
	ld hl, term_cursor
	call ostream
    ld hl, term_kbd_buff
	call input
	
	ld de, cmd_help
	call strcomp            ; seek'n help? we got you!
	jr z, .help
	
	ld de, cmd_dxdiag
	call strcomp            ; seek'n help? we got you!
	jp z, .dxdiag
	
	ld de, cmd_cls
	call strcomp
	jr z, .cls
	
	ld de, cmd_mem
	call strcomp
	jr z, .mem
	
	ld de, cmd_dir
	call strcomp
	jr z, .dir
	
	ld de, cmd_reboot
	call strcomp
	jp z, reboot
	
	ld de, cmd_open
	call strcomp
	jp z, .open
	
	ld de, cmd_dawn
	call strcomp
	jp z, .dawn
	
	ld de, cmd_shelby
	call strcomp
	jp z, .shelby
	
	ld hl, no_cmd
	call print
	
	
	jp .loop
.shelby:
	ld hl, result_shelby
	call print
	ld a, l
	out (0x90), a
	jp .loop
.dawn:
	ld hl, result_dawn
	call print
	ld a, l
	out (0x90), a
	jp .loop
.help:
	ld hl, helpstr
    call print
    jp .loop
.cls:
	ld a, 0
	call send
	jp .loop
.dir:
	;ld hl, $9000 ;512
	;call alloc   ; alloc
	;ld bc, 0
	;ld de, 0
	;call ide_load
	;ld bc, FAT.OS_NAME
	;ld hl, $9000
	;add hl, bc
	;call ssd_list_files
	IN		A, (ide_status)
	call byte_to_hex
	call print
	;call rm_last ; free
	jp .loop
.mem:
	ld a, '0'
	call send
	ld a, 'x'
	call send
	call bytes_free
	call int_to_hex
	call ostream
	ld hl, .bytes_str
	call print
	;ld hl, (heap_top)
	;call int_to_hex
	;call print
	;ld hl, 0
	;add hl, sp
	;call int_to_hex
	;call print
	;call rm_last ; free bytes allocated by call to int_to_hex
	;call rm_last ; free bytes allocated by call to int_to_hex
	call rm_last ; free bytes allocated by call to int_to_hex
	jp .loop
.open:
	ld a, '>'
	call send
	ld hl, (term_kbd_buff)
	call input
	ld a, 1
	call ssd_open
	call ssd_read
	call print
	call rm_last
	call rm_last
	jp .loop
.dxdiag:  ; Diagnostic Program
	call dxdiag
	jp .loop
.bytes_str: db " Bytes", 0
term_start_string: db "NTIOS 0.1", 0
term_cursor:       db "# ", 0
cmd_mem:           db "mem", 0
cmd_cls:           db "cls", 0
cmd_dir:			db "dir", 0
cmd_reboot:			db "reboot", 0
cmd_open:			DB "open", 0
cmd_dxdiag:			DB "dxdiag", 0
cmd_shelby:			db "follower of the lemonist dictator",0
cmd_dawn:			db "lemonist dictator",0
result_shelby:		db "Shelby",0
result_dawn:		db "Dawn",0
no_cmd:            db "Command Not Found.", 0
heap_top:      equ $8002
tmp:           equ $8004
term_kbd_buff: equ $8006
PD_init: db 0x19, 0x3A, 0x3F, 0x0C, 0x1B, 0x04, 0x40, 0x3D
teststr: db "Get rekt bAd kidZ.",0
ssd_fs:
	db "test.txt", 0
	dw 19
	dw teststr
test_bin_end:
	db 0