; alloc - allocate hl bytes of memory, hl returns its address.

alloc:
	ld a, h
	and 12
	jp nz, .error1
	ld de, (heap_top)
	add hl, de           ; get the new heap top
	ld a, $80
	and h
	jp z, .error
	ld (heap_top), hl    ; expand the heap
	
	push de              ; push the old heap top onto the stack 
	
	ld de, (heap_vars)
	sla e
    rl d
	ld hl, heap_list
	add hl, de           ; get where we are going to put the next heap_var
	
    push hl
    pop de
	ld (tmp), sp
    ld hl, (tmp)
	ldi                  ; store the value of the new heap var
    ldi
	
	ld hl, heap_vars
	inc (hl)             ; we now have one more heap var
	
	; hl now contains the address of the allocated space
	pop hl
    
    ret
.error:
	ld hl, .err_msg
	jp system_error
.err_msg: db "ERROR: heap top is at an invalid address.", 0
.error1:
	ld hl, .err2_msg
	call print
	pop hl
	jp terminal_pgm.loop
.err2_msg: db "Cannot allocate that much RAM. Exiting.", 0
rm_last:
	push bc
	push hl
	push de
	
	ld hl, heap_list
	ld de, (heap_vars) ; get pointer to last element in heap_vars array
	dec de             ; de becomes source
	sla e
    rl d
	add hl, de
	
	ld de, heap_top ; hl is destination address
	
	ldi				; load
	ldi
	
	pop de
	pop hl
	pop bc
	ret
bytes_free:
	push de
	ld de, (heap_top)
	ld hl, 0
	add hl, sp
	or a
	sbc hl, de
	pop de
	ret


